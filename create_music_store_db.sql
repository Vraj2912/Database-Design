-- MySQL Script generated by MySQL Workbench
-- Tue Dec 11 12:14:55 2018
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema music_store_db
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `music_store_db` ;

-- -----------------------------------------------------
-- Schema music_store_db
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `music_store_db` DEFAULT CHARACTER SET utf8 ;
USE `music_store_db` ;

-- -----------------------------------------------------
-- Table `music_store_db`.`address`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `music_store_db`.`address` (
  `address_id` INT NOT NULL AUTO_INCREMENT,
  `street_1` VARCHAR(45) NOT NULL,
  `street_2` VARCHAR(45) NULL DEFAULT '',
  `city` VARCHAR(45) NOT NULL,
  `postal_code` CHAR(6) NOT NULL,
  `user_id` INT NOT NULL,
  `state_id` INT NOT NULL,
  `country_id` INT NOT NULL,
  PRIMARY KEY (`address_id`),
  INDEX `fk_address_user1_idx` (`user_id` ASC) ,
  INDEX `fk_address_state1_idx` (`state_id` ASC) ,
  INDEX `fk_address_country1_idx` (`country_id` ASC) ,
  CONSTRAINT `fk_address_user1`
    FOREIGN KEY (`user_id`)
    REFERENCES `music_store_db`.`user` (`user_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_address_state1`
    FOREIGN KEY (`state_id`)
    REFERENCES `music_store_db`.`state` (`state_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_address_country1`
    FOREIGN KEY (`country_id`)
    REFERENCES `music_store_db`.`country` (`country_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `music_store_db`.`album_attribute`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `music_store_db`.`album_attribute` (
  `album_id` INT NOT NULL,
  `single_id` INT NOT NULL,
  PRIMARY KEY (`album_id`, `single_id`),
  INDEX `fk_album_attribute_product2_idx` (`single_id` ASC) ,
  UNIQUE INDEX `single_UNIQUE` (`single_id` ASC) ,
  CONSTRAINT `fk_album_attribute_product1`
    FOREIGN KEY (`album_id`)
    REFERENCES `music_store_db`.`product` (`product_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_album_attribute_product2`
    FOREIGN KEY (`single_id`)
    REFERENCES `music_store_db`.`product` (`product_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `music_store_db`.`artist`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `music_store_db`.`artist` (
  `artist_id` INT NOT NULL AUTO_INCREMENT,
  `first_name` VARCHAR(45) NOT NULL,
  `last_name` VARCHAR(45) NOT NULL,
  `alias` VARCHAR(45) NOT NULL,
  `description` TEXT NOT NULL,
  `timestamp` DATETIME NULL DEFAULT CURRENT_TIMESTAMP,
  `gender` INT NOT NULL,
  `nationality` INT NOT NULL,
  PRIMARY KEY (`artist_id`),
  UNIQUE INDEX `alias_UNIQUE` (`alias` ASC) ,
  INDEX `fk_artist_gender1_idx` (`gender` ASC) ,
  INDEX `fk_artist_country1_idx` (`nationality` ASC) ,
  CONSTRAINT `fk_artist_gender1`
    FOREIGN KEY (`gender`)
    REFERENCES `music_store_db`.`gender` (`gender_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_artist_country1`
    FOREIGN KEY (`nationality`)
    REFERENCES `music_store_db`.`country` (`country_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `music_store_db`.`artist_credit`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `music_store_db`.`artist_credit` (
  `product_id` INT NOT NULL,
  `artist_id` INT NOT NULL,
  INDEX `fk_artist_credit_product1_idx` (`product_id` ASC) ,
  INDEX `fk_artist_credit_artist1_idx` (`artist_id` ASC) ,
  PRIMARY KEY (`product_id`, `artist_id`),
  CONSTRAINT `fk_artist_credit_product1`
    FOREIGN KEY (`product_id`)
    REFERENCES `music_store_db`.`product` (`product_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_artist_credit_artist1`
    FOREIGN KEY (`artist_id`)
    REFERENCES `music_store_db`.`artist` (`artist_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `music_store_db`.`country`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `music_store_db`.`country` (
  `country_id` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(45) NOT NULL,
  UNIQUE INDEX `name_UNIQUE` (`name` ASC) ,
  PRIMARY KEY (`country_id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `music_store_db`.`gender`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `music_store_db`.`gender` (
  `gender_id` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`gender_id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `music_store_db`.`genre`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `music_store_db`.`genre` (
  `genre_id` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`genre_id`),
  UNIQUE INDEX `name_UNIQUE` (`name` ASC) )
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `music_store_db`.`language`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `music_store_db`.`language` (
  `language_id` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`language_id`),
  UNIQUE INDEX `name_UNIQUE` (`name` ASC) )
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `music_store_db`.`order`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `music_store_db`.`order` (
  `order_id` INT NOT NULL AUTO_INCREMENT,
  `order_code` CHAR(10) NOT NULL,
  `order_date` DATETIME NOT NULL,
  `order_discount_amount` DECIMAL(10,2) NOT NULL,
  `order_total` DECIMAL(10,2) NOT NULL,
  `payment_status` VARCHAR(45) NOT NULL,
  `payment_name` VARCHAR(45) NOT NULL,
  `payment_card_number` VARCHAR(45) NOT NULL,
  `timestamp` DATETIME NULL DEFAULT CURRENT_TIMESTAMP,
  `payment_method` INT NOT NULL,
  `user_id` INT NOT NULL,
  PRIMARY KEY (`order_id`),
  INDEX `fk_orders_payment_method1_idx` (`payment_method` ASC) ,
  INDEX `fk_order_user1_idx` (`user_id` ASC) ,
  UNIQUE INDEX `order_code_UNIQUE` (`order_code` ASC) ,
  CONSTRAINT `fk_orders_payment_method1`
    FOREIGN KEY (`payment_method`)
    REFERENCES `music_store_db`.`payment_method` (`payment_method_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_order_user1`
    FOREIGN KEY (`user_id`)
    REFERENCES `music_store_db`.`user` (`user_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION);


-- -----------------------------------------------------
-- Table `music_store_db`.`order_has_product`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `music_store_db`.`order_has_product` (
  `order_id` INT NOT NULL,
  `product_id` INT NOT NULL,
  `user_id` INT NOT NULL,
  PRIMARY KEY (`order_id`, `product_id`),
  INDEX `fk_order_has_product_product1_idx` (`product_id` ASC) ,
  INDEX `fk_order_has_product_order1_idx` (`order_id` ASC) ,
  INDEX `fk_order_has_product_user1_idx` (`user_id` ASC) ,
  CONSTRAINT `fk_order_has_product_order1`
    FOREIGN KEY (`order_id`)
    REFERENCES `music_store_db`.`order` (`order_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_order_has_product_product1`
    FOREIGN KEY (`product_id`)
    REFERENCES `music_store_db`.`product` (`product_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_order_has_product_user1`
    FOREIGN KEY (`user_id`)
    REFERENCES `music_store_db`.`user` (`user_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION);


-- -----------------------------------------------------
-- Table `music_store_db`.`payment_method`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `music_store_db`.`payment_method` (
  `payment_method_id` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`payment_method_id`),
  UNIQUE INDEX `name_UNIQUE` (`name` ASC) )
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `music_store_db`.`product`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `music_store_db`.`product` (
  `product_id` INT NOT NULL AUTO_INCREMENT,
  `product_title` VARCHAR(45) NOT NULL,
  `product_alias` VARCHAR(60) NOT NULL,
  `product_cover_link` VARCHAR(45) NOT NULL,
  `product_published_date` DATETIME NOT NULL,
  `product_price` DECIMAL(10,2) NOT NULL,
  `product_discount` DECIMAL(10,2) NULL DEFAULT 0,
  `timestamp` DATETIME NULL DEFAULT CURRENT_TIMESTAMP,
  `language_id` INT NOT NULL,
  `product_type_id` INT NOT NULL,
  PRIMARY KEY (`product_id`),
  UNIQUE INDEX `title_UNIQUE` (`product_title` ASC) ,
  UNIQUE INDEX `alias_UNIQUE` (`product_alias` ASC) ,
  INDEX `fk_single_language1_idx` (`language_id` ASC) ,
  INDEX `fk_product_product_type1_idx` (`product_type_id` ASC) ,
  CONSTRAINT `fk_single_language10`
    FOREIGN KEY (`language_id`)
    REFERENCES `music_store_db`.`language` (`language_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_product_product_type1`
    FOREIGN KEY (`product_type_id`)
    REFERENCES `music_store_db`.`product_type` (`product_type_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `music_store_db`.`product_genre`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `music_store_db`.`product_genre` (
  `product_id` INT NOT NULL,
  `genre_id` INT NOT NULL,
  INDEX `fk_product_genre_product1_idx` (`product_id` ASC) ,
  INDEX `fk_product_genre_genre1_idx` (`genre_id` ASC) ,
  PRIMARY KEY (`product_id`, `genre_id`),
  CONSTRAINT `fk_product_genre_product1`
    FOREIGN KEY (`product_id`)
    REFERENCES `music_store_db`.`product` (`product_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_product_genre_genre1`
    FOREIGN KEY (`genre_id`)
    REFERENCES `music_store_db`.`genre` (`genre_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `music_store_db`.`product_type`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `music_store_db`.`product_type` (
  `product_type_id` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`product_type_id`),
  UNIQUE INDEX `name_UNIQUE` (`name` ASC) )
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `music_store_db`.`role`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `music_store_db`.`role` (
  `role_id` INT NOT NULL AUTO_INCREMENT,
  `role_name` VARCHAR(45) NULL,
  PRIMARY KEY (`role_id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `music_store_db`.`single_attribute`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `music_store_db`.`single_attribute` (
  `single` INT NOT NULL,
  `lyric` TEXT NULL,
  PRIMARY KEY (`single`),
  INDEX `fk_single_attribute_product1_idx` (`single` ASC) ,
  CONSTRAINT `fk_single_attribute_product1`
    FOREIGN KEY (`single`)
    REFERENCES `music_store_db`.`product` (`product_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `music_store_db`.`state`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `music_store_db`.`state` (
  `state_id` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(45) NOT NULL,
  `country_id` INT NOT NULL,
  PRIMARY KEY (`state_id`),
  INDEX `fk_area_area_type1_idx` (`country_id` ASC) ,
  UNIQUE INDEX `name_UNIQUE` (`name` ASC) ,
  CONSTRAINT `fk_area_area_type1`
    FOREIGN KEY (`country_id`)
    REFERENCES `music_store_db`.`country` (`country_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `music_store_db`.`user`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `music_store_db`.`user` (
  `user_id` INT NOT NULL AUTO_INCREMENT,
  `first_name` VARCHAR(45) NOT NULL,
  `last_name` VARCHAR(45) NOT NULL,
  `email` VARCHAR(45) NULL,
  `password` VARCHAR(64) NOT NULL,
  `phone` CHAR(12) NULL,
  `role_id` INT NOT NULL,
  `gender_id` INT NOT NULL,
  PRIMARY KEY (`user_id`),
  INDEX `fk_user_role1_idx` (`role_id` ASC) ,
  INDEX `fk_user_gender1_idx` (`gender_id` ASC) ,
  CONSTRAINT `fk_user_role1`
    FOREIGN KEY (`role_id`)
    REFERENCES `music_store_db`.`role` (`role_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_user_gender1`
    FOREIGN KEY (`gender_id`)
    REFERENCES `music_store_db`.`gender` (`gender_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

USE `music_store_db` ;

-- -----------------------------------------------------
-- Placeholder table for view `music_store_db`.`order_payment_view`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `music_store_db`.`order_payment_view` (`payment_status` INT, `payment_name` INT, `payment_card_number` INT, `phone` INT, `order_code` INT, `order_date` INT, `order_total` INT, `user_name` INT);

-- -----------------------------------------------------
-- Placeholder table for view `music_store_db`.`own_product_view`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `music_store_db`.`own_product_view` (`user_name` INT, `product_title` INT, `product_type` INT);

-- -----------------------------------------------------
-- View `music_store_db`.`order_payment_view`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `music_store_db`.`order_payment_view`;
USE `music_store_db`;
CREATE  OR REPLACE VIEW `order_payment_view` AS
	SELECT payment_status, payment_name, payment_card_number, phone, order_code, order_date, order_total, CONCAT(first_name, ' ', last_name) AS user_name
	FROM `order` JOIN user USING (user_id);

-- -----------------------------------------------------
-- View `music_store_db`.`own_product_view`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `music_store_db`.`own_product_view`;
USE `music_store_db`;
CREATE  OR REPLACE VIEW `own_product_view` AS
	SELECT CONCAT(first_name, ' ', last_name) AS user_name, product_title, pt.`name` AS product_type
	FROM `user` JOIN order_has_product op USING (user_id)
				JOIN product p USING (product_id)
				JOIN `order` o USING (order_id)
				JOIN product_type pt USING (product_type_id)
	WHERE o.payment_status = 'APPROVED';

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
